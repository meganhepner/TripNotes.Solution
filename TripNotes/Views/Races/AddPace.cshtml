@model TripNotes.Models.Race

@{
  Layout = "_Layout";
}

<h1>Add Pace<h1>

<h3>@Html.Label("Date "): @Html.DisplayFor(model => model.RaceDate)  
    @Html.DisplayFor(model => model.RaceLength) @Html.Label("    Furlongs ") 
    @Html.HiddenFor(model => model.RaceLength, new { @class="raceLength" })
    @Html.Label("     Class "): @Html.DisplayFor(model => model.RaceClass)
</h3>

  @if(@Model.Horses.Count == 0)
{
  <p>This race has no horses assigned to it</p>
}
else
{
  <h2>Horses :</h2>

  @using(Html.BeginForm("AddRaceNotes", "Races")) 
    {
      <div class="row">
        <div class="col-md-4 column">
          <label for="firstFraction">First Fraction Split</label>
          <input type="number" step="0.1" name="firstFraction" class="firstFraction">
        </div>
        <div class="col-md-4 column">
          <label for="secondFraction">Second Fraction Split</label>
          <input type="number" step="0.1" name="secondFraction" class="secondFraction">
        </div>
        <div class="col-md-4 column">
          <label for="thirdFraction">Third Fraction Split</label>
          <input type="number" step="0.1" name="thirdFraction" class="thirdFraction">
        </div>
      </div>
      <hr>
      <div style="overflow-x:auto;">
        <table class="table">
          <tr>
            <th>
              <li>Horse</li>
            </th>
            <th>
              <label for="BL1">1 Call Beaten Lengths</label>
            </th>
            <th>
              <label for="BL2">2 Call Beaten Lengths</label>
            </th>
            <th>
              <label for="BL3">3 Call Beaten Lengths</label>
            </th>
          </tr>

          @foreach (var join in Model.Horses)
          {
            <tr>
              <td>
                @Html.Hidden("joinId", @join.HorseRaceId, new { @class="joinId" })
                @join.Horse.HorseName
              </td>
              <td>
                <input type="number" step="0.1" name="BL1" class="BL1"><br>
              </td>
              <td>
                <input type="number" step="0.1" name="BL2" class="BL2">
              </td>
              <td>
                <input type="number" step="0.1" name="BL3" class="BL3"><br>
              </td>
            </tr>
          }
          </table>
      </div>
      <input type="submit" id="btnSubmit" value="Calculate Pace Figures" />
      <input type="button" value="Return To Race List" onclick="location.href='@Url.Action("Index", "Races")'" />
      }
    } 



@* 

else
{
  <h2>Horses :</h2>
  <ul>
  @using(Html.BeginForm()) 
    {

      @foreach(var join in Model.Horses)
      { 
      <div class ="BL">
        @Html.Hidden("joinId", @join.HorseRaceId, new { @class="joinId" })

        <li>@join.Horse.HorseName</li>

        <label for="BL1">First Call Beaten Lengths</label>
        <input type="number" step="0.1" name="BL1" class="BL1"><br>
        <p>If horse was in lead at first call, enter 0 for beaten lengths. Otherwise, enter how many lengths the horse was behind the pace horse.</p>
        <label for="BL2">Second Call Beaten Lengths</label>
        <input type="number" step="0.1" name="BL2" class="BL2"><br>
        <label for="BL3">Third Call Beaten Lengths</label>
        <input type="number" step="0.1" name="BL3" class="BL3"><br>
      </div>
      }
      <input type="submit" id="btnSubmit" value="Calculate Pace Figures" /><br>
    }

      <button type="button" id="test">Test</button>

</ul>
} *@

  @section scripts {
    <script type="text/javascript">
      $(document).ready(function() {

        function getFPSData() {
          let alldata = [];
              var raceLength = $(".raceLength").val();
              var firstFraction = $(".firstFraction").val();
              var secondFraction = $(".secondFraction").val();
              var thirdFraction = $(".thirdFraction").val();
          $(".BL").each(function() {
              var HorseRaceId = $(this).find(".joinId").val();
              var BL1 = $(this).find(".BL1").val();
              var BL2 = $(this).find(".BL2").val();
              var BL3 = $(this).find(".BL3").val();
              if (raceLength < 8) {
                let FPS1 = calcSprint1Fr(BL1, firstFraction).toFixed(2);
                let FPS2 = calcSprint2Fr(BL1, BL2, secondFraction).toFixed(2);
                let FPS3 = calcSprint3Fr(BL2, BL3, thirdFraction, raceLength).toFixed(2);
                alldata.push(HorseRaceId, FPS1, FPS2, FPS3);
                } else if (raceLength >= 8) {
                  let FPS1 = calcRoute1Fr (BL1, firstFraction).toFixed(2);
                  let FPS2 = calcRoute2Fr (BL1, BL2, secondFraction).toFixed(2);
                  let FPS3 = calcRoute3Fr (BL2, BL3, thirdFraction, raceLength).toFixed(2);
                  alldata.push(HorseRaceId, FPS1, FPS2, FPS3);
                  }
                });
          console.log(alldata);
          return alldata;
        };

        function calcSprint1Fr(BL1, firstFraction) {
          let FPS = (1320 - (BL1 * 10)) / firstFraction;
          return FPS;
        }

        function calcSprint2Fr(BL1, BL2, secFraction) {
          let change = (BL1 - BL2);
          console.log(change);
          let FPS = (1320 + (change * 10)) / secFraction;
          return FPS;
        }

        function calcSprint3Fr(BL2, BL3, thirdFraction, raceLength) {
          let change = (BL2 - BL3);
          console.log(change);
          let distance = calcDistance(raceLength);
          console.log(distance);
          let FPS = (distance + (change * 10)) / thirdFraction;
          return FPS;
        }

        function calcRoute1Fr(BL1, firstFraction) {
          let FPS = (2640 - (BL1 * 10)) / firstFraction;
          return FPS;
        }

        function calcRoute2Fr(BL1, BL2, secFraction) {
          let change = (BL1 - BL2);
          let FPS = (1320 + (change * 10)) / secFraction;
          return FPS;
        }

        function calcRoute3Fr(BL2, BL3, thirdFraction, raceLength) {
          let change = (BL2 - BL3);
          let distance = calcDistance(raceLength);
          let FPS = (distance + (change * 10)) / thirdFraction;
          return FPS;
        }

        function calcDistance(raceLength) {
          let distance;
          length = parseFloat(raceLength);
          if (length === 6) {
            distance = 1320;
          } else if (length === 6.5) {
            distance = 1650;
          } else if (length === 7) {
            distance = 1980;
          } else if (length === 8) {
            distance = 1320;
          } else if (length === 8.18) {
            distance = 1440;
          } else if (length === 8.42) {
            distance = 1520;
          } else if (length === 8.5) {
            distance = 1650;
          } else if (length === 9) {
            distance = 1980;
          } else if (length === 9.5) {
            distance = 2310
          }
          console.log(distance);
          return distance;
        }

        $('#btnSubmit').click(function () {
          var pace = (getFPSData());
          var commaSeparatedPace = pace.toString(); 
          console.log(commaSeparatedPace);  
          debugger       
          $.ajax({
              url: '/Races/AddPace',
              type: 'POST',
              data: { horsePace: commaSeparatedPace },
        });
      });
    });
    </script>
}

   @* $('#test').click(function calcSprint3Fr() {
          var thirdFraction = 32.2;
          var BL2 = 5.25;
          var BL3 = 0;
          raceLength = 6.5;
          let distance;

          if (raceLength === 6) {
            distance = 1320;
          } else if (raceLength === 6.5) {
            distance = 1650;
          } else if (raceLength === 7) {
            distance = 1980;
          }
          let change = (BL2 - BL3);
          let FPS = (distance + (change * 10)) / thirdFraction;
          console.log(FPS);
          return FPS;
        }); *@

  